AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an ALB with 0.0.0.0/0 to port 80 redirected to port 443 and 10.0.0.0/8 to port 95

Parameters:
  pOwner:
    Description: Owner's Name
    AllowedPattern: ^([A-Za-z0-9]*)?$
    Type: String
  pEmail:
    Description: Owner's e-Mail'
    AllowedPattern: ^([A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,3})?$
    Type: String
  pResourceName:
    Description: Name for the Resource
    AllowedPattern: ^([A-Za-z0-9]*)?$
    Type: String
  pCname:
    Type: String
    Description: Cname to create in DNS (friendlyname) [no space or specical characters]
    AllowedPattern: ^([A-Za-z0-9]*)?$
  pCommonName:
    Type: String
    Description: Name of the certificate to create (friendlyname.aws.com)
    AllowedPattern: ^(([A-Za-z0-9]{1,63}\.){1,10}[A-Za-z0-9]{1,63})?$

Resources:
  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${pResourceName}-ALB-${AWS::Region}-${AWS::AccountId}
      Subnets:
        - !ImportValue oPrivateSubnetA
        - !ImportValue oPrivateSubnetB
        - !ImportValue oPrivateSubnetC
      Scheme: internal
      SecurityGroups:
        - !Ref rLBSecurityGroup
      Tags:
      - Key: Owner
        Value: !Ref pOwner
      - Key: Email
        Value: !Ref pEmail
      - Key: ResourceName
        Value: !Sub ${pResourceName}-ALB-${AWS::Region}-${AWS::AccountId}

  rLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pResourceName}-ALB-SG-${AWS::Region}-${AWS::AccountId}
      GroupDescription: "Security group for ALB"
      VpcId: !ImportValue oVPCID
      SecurityGroupEgress:
        -
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 95
          ToPort: 95
          CidrIp: 10.0.0.0/8

  rHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !GetAtt rCertificate.Arn
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "You've reached the listener! Congrats!"
            StatusCode: "503"

  rRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: "443"
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"

  rListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: !GetAtt rCertificate.Arn
      ListenerArn: !Ref rHTTPSListener

  rCertificate:
  #
  # Need to do something here
  #

  rAddCNAME:
    Type: Custom::RemoteRoute53
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:RemoteRoute53"
      RecordType: CNAME  # A and PTR are not currently supported
      RecordName: !Ref pCname # should not have .data.ohio.gov on it, just the name
      RecordValue: !GetAtt rLoadBalancer.DNSName

Outputs:
  oALB:
    Value: !Ref rLoadBalancer
    Description:  ALB
  oALBSG:
    Value: !Ref rLBSecurityGroup
    Description:  ALB Security Group
  oALBSGID:
    Value: !GetAtt rLBSecurityGroup.GroupId
    Description:  ALB Security Group ID
  oHTTPSListener:
    Value: !Ref rHTTPSListener
    Description:  HTTPS Listener
